function renderComments(lineComments) {
  $(".CodeMirror").each(function(index) {
    var cm = this.CodeMirror;
    cm.operation(function() {
      var theseComments = lineComments[index];
      Object.keys(theseComments).forEach(function(type, _) {
        var commentsByType = theseComments[type];
        Object.keys(commentsByType).forEach(function(line, _) {
          var commentsOnLine = commentsByType[line];
          commentsOnLine.forEach(function(comment, _) {
            renderComment(cm, type, line, comment);
          });
        });
      });
    });
  });
}

function renderComment(cm, type, line, comment) {
  var widget = $("<div>").addClass(comment.severity).addClass(type);
  var table = $("<table>");
  widget.append(table);
  var row = $("<tr>");
  table.append(row);
  var td = $("<td>").addClass("nowrap");
  row.append(td);
  var label = $("<span>").text(comment.label || comment.author).addClass("label label-default");
  td.append(label);
  if (comment.suppressed) {
    var icon = $("<span>").addClass("glyphicon glyphicon-flag")
        .data("toggle", "toolip").data("placement", "top")
        .attr("title", "Too many errors of this type were found; no further points were deducted");
    td.append(icon);
    var deduction = $("<span>").text("[-" + comment.deduction + "]").addClass("label label-default")
        .data("toggle", "tooltip").data("placement", "top")
        .attr("title", "This problem would normally deduct " + comment.deduction + " points");
    td.append(deduction);
  } else {
    var icon = $("<span>").addClass("glyphicon")
        .data("toggle", "tooltip").data("placement", "top");
    if (comment.severity === "Error")
      icon.addClass("glyphicon-ban-circle").attr("title", "Error");
    else if (comment.severity === "Warning")
      icon.addClass("glyphicon-warning-sign").attr("title", "Warning");
    else
      icon.addClass("glyphicon-info-sign").attr("title", "Suggestion");
    td.append(icon);
    var deduction = $("<span>").text("-" + comment.deduction).addClass("label label-danger");
    td.append(deduction);
  }
  td = $("<td>");
  row.append(td);
  if (comment.title !== "" && comment.title !== undefined) {
    td.append($("<span>").addClass("description").text(comment.title + ": " + comment.comment));
  } else {
    td.append($("<span>").addClass("description").text(comment.comment));
  }
  cm.addLineWidget(parseInt(line) - 1, widget[0], {coverGutter: false, noHScroll: true});
}

$(function (){
  $("textarea.sourceCode").each(function(index, code) {
    if ($(code).data("lang")) {
      var cm = CodeMirror.fromTextArea(code, {
        readOnly: true, indentUnit: 2,
        mode: $(code).data("lang"),
        theme: 'mdn-like', viewportMargin: Infinity,
        lineNumbers: true, lineWrapping: false,
        styleActiveLine: true
      });
      var height = 75 * cm.heightAtLine(1, "local");
      cm.setSize(null, height + 30);
    }
    $(code).addClass("cm-s-mdn-like cm-s-default");
  });
  $(".tab-pane.hideAfterRender").each(function() {
    $(this).removeClass("active").removeClass("hideAfterRender");
  });
  $("#files").treeview({
    expandIcon: 'glyphicon glyphicon-chevron-down', // deliberately the same
    collapseIcon: 'glyphicon glyphicon-chevron-down', // always expanded
    enableLinks: true,
    onNodeSelected: function(e, data) {
      e.preventDefault();
      e.stopPropagation();
      if (data.href !== undefined && data.href !== "#") {
        $(".tab-pane").removeClass("active");
        // make sure any comments are visible
        $(data.href).addClass("active").find(".CodeMirror")[0].CodeMirror.refresh();
      }
    },
    data: <%= raw(JSON.pretty_generate(@submission_dirs)) %>
  });
  var filesTreeview = $("#files").treeview(true);
  filesTreeview.expandAll({ silent: true });
  $("#files-sidebar").data("offset-top", $("#files").offset().top);
  var fileMap = {}
  filesTreeview.findNodes('', 'href').forEach(function(n, i) {
    fileMap[n.href] = n;
    fileMap[i] = n.href;
  });
  window.selectTreeviewFileByHref = function(href) {
    filesTreeview.selectNode(fileMap[href]);
  }
  window.selectTreeviewFileByIndex = function(index) {
    filesTreeview.selectNode(fileMap[fileMap[index]]);
  }
  if (document.location.hash !== "") {
    $("#files a[href='" + document.location.hash + "']").tab('show');
    selectTreeviewFileByHref(document.location.hash);
  } else {
    selectTreeviewFileByIndex(0);
  }
});
