$(function() {
  var styles = document.getElementById("comment-styles").sheet;
  var showOurComments = styles.insertRule("div.CodeMirror-linewidget > div.ManualGrader { display: block; }",
                                          styles.cssRules.length);
  var hideOtherComments;
  function hideOthers() {
    hideOtherComments = styles.insertRule("div.CodeMirror-linewidget > div { display: none; }",
                                          styles.cssRules.length);
  }
  function showOthers() {
    styles.deleteRule(hideOtherComments);
  }

  $("#toggle-comments").change(function() {
    if ($(this).prop("checked"))
      showOthers();
    else
      hideOthers();
  });
  hideOthers();

  var maxScore = <%= @grader.out_of %>;
  function updateScore() {
    var deductions = $(".deduction").map(function() { return parseFloat($(this).val()); })
        .get().reduce(function(a,b) { return a + b; }, 0.0);
    $("#score").text(Math.max(maxScore - deductions, 0).toFixed(2));
  }

  var commentID = 0;
  function insertComment(cm, line, info) {
    var i = commentID++;
    var widget = $("<div>").attr("id", "comment_" + i).addClass("ManualGrader Error form-group");
    var table = $("<table>").addClass("container-fluid");
    widget.append(table);
    var row = $("<tr>");
    table.append(row);
    var td = $("<td>").addClass("nowrap col-sm-2");
    row.append(td);
    var categoryInput =
        $("<select>").attr("id", "severity_" + i)
        .append($("<option>").text("Error").attr("selected", "true"))
        .append($("<option>").text("Warning"))
        .append($("<option>").text("Suggestion"))
    categoryInput.on("change", function() {
      widget.removeClass(widget.data("severity")).data("severity", $(this).val()).addClass($(this).val());
    });
    if (info && info.severity)
      categoryInput.val(info.severity).change();
    
    var category = $("<p>").append($("<label>").attr("for", "severity_" + i)
                                     .text("Severity:")).append(categoryInput);
    td.append(category);
    var deductionInput = makeSpinner({klass: "deduction", min: 0, delta: 0.1, precision: 2})
        .attr("id", "deduction_" + i)
    var deduction =      
        $("<p>").append($("<label>").attr("for", "deduction_" + i).text("Deduction:"))
        .append($("<span>").css({"display": "inline-block", "vertical-align": "bottom"})
                .append(deductionInput));
    td.append(deduction);
    deductionInput.on("change", function() {
      updateScore();
    });
    if (info && info.deduction)
      deductionInput.val(info.deduction).change();
    td = $("<td>").addClass("col-sm-10");
    row.append(td);
    var delComment = $("<span>").addClass("btn btn-alert pull-right").append($("<span>").addClass("glyphicon glyphicon-remove"));
    var commentText = $("<textarea>").attr("id", "message_" + i).addClass("form-control");
    var comment =
        $("<div>")
        .append(delComment)
        .append($("<label>").text("Comment:").attr("for", "message_" + i))
        .append(commentText);
    td.append(comment);
    if (info && info.comment)
      commentText.val(info.comment).change();
    
    var ret = {cmWidget: cm.addLineWidget(line, widget[0], {coverGutter: false, noHScroll: true}),
               dom: widget};
    delComment.on("click", function() { deleteComment(ret); });
    return ret;
  }
  function deleteComment(comment) {
    comment.cmWidget.clear();
    updateScore();
  }
  updateScore();

  $(".CodeMirror").each(function(i) {
    this.CodeMirror.on("gutterClick", insertComment);
  });

  var filesTree = $("#files");
  filesTree.on("nodeChecked", function(e, data) {
    if (data.href !== undefined && data.href !== "#")
      $(data.$el).addClass("unvisited");
    else
      filesTree.treeview("uncheckNode", data);
  });
  filesTree.on("nodeUnchecked", function(e, data) {
    $(data.$el).removeClass("unvisited");
    if ($(".unvisited").length === 0) {
      $("#completed").removeClass("disabled").text("Mark grading as complete");
    }      
  })
  filesTree.treeview("getCollapsed").map(function(item) {
    filesTree.treeview("checkNode", item);
  });

  filesTree.on("nodeSelected", function(e, data) {
    e.preventDefault();
    e.stopPropagation();
    $("#files").treeview("uncheckNode", data);
  });
  filesTree.treeview("selectNode", filesTree.treeview("getCollapsed")[0]);
  
});
