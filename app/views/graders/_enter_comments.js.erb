$(function() {
  var styles = document.getElementById("comment-styles").sheet;
  var showOurComments = styles.insertRule("div.CodeMirror-linewidget > div.ManualGrader { display: block; }",
                                          styles.cssRules.length);
  var hideOtherComments;
  function hideOthers() {
    hideOtherComments = styles.insertRule("div.CodeMirror-linewidget > div { display: none; }",
                                          styles.cssRules.length);
  }
  function showOthers() {
    styles.deleteRule(hideOtherComments);
  }

  $("#toggle-comments").change(function() {
    if ($(this).prop("checked"))
      showOthers();
    else
      hideOthers();
  });
  hideOthers();

  var maxScore = <%= @grader.out_of %>;
  function updateScore() {
    var deductions = $(".deduction").map(function() { return parseFloat($(this).val()); })
        .get().reduce(function(a,b) { return a + b; }, 0.0);
    $("#score").text(Math.max(maxScore - deductions, 0).toFixed(2));
  }

  var autosaveHandle = undefined;
  var commentObjs = [];
  function autosave() {
    if (autosaveHandle === undefined) {
      autosaveHandle = window.setTimeout(function() {
        console.log("Sending:");
        console.log(commentObjs);
        $.ajax({
          type: "PUT",
          url: "<%= course_assignment_submission_grader_path(@course, @assignment, @submission, @grader) %>",
          contentType: 'application/json; charset=UTF-8',
          data: JSON.stringify({comments: commentObjs}, function(k, v) {
            if (k === "saved") return undefined;
            return v;
          }),
          success: function(msg) {
            console.log("Success: " + msg);
            commentObjs.forEach(function(c) { c.saved = true; });
            autosaveHandle = undefined;
          }
        });
      }, 1000);
    }
  }

  var commentID = 0;
  function insertComment(cm, line, comment) {
    if (comment === undefined)
      comment = {severity: "Error", deduction: 0, comment: ""};

    comment.line = line + 1;
    comment.file = $(cm.getTextArea).data("source");
    comment.category = "<%= current_user.name %>";
    commentObjs.push(comment);
    
    var i = commentID++;
    var widget = $("<div>").attr("id", "comment_" + i).addClass("ManualGrader Error form-group");
    var table = $("<table>").addClass("container-fluid");
    widget.append(table);
    widget.on("focusout", autosave);
    var row = $("<tr>");
    table.append(row);
    var td = $("<td>").addClass("nowrap col-sm-2");
    row.append(td);
    var categoryInput =
        $("<select>").attr("id", "severity_" + i)
        .append($("<option>").text("Error").attr("selected", "true"))
        .append($("<option>").text("Warning"))
        .append($("<option>").text("Suggestion"))
    categoryInput.on("change", function() {
      widget.removeClass(widget.data("severity")).data("severity", $(this).val()).addClass($(this).val());
      comment.severity = $(this).val();
      comment.saved = false;
    });
    if (comment.severity)
      categoryInput.val(comment.severity).change();
    
    td.append(
      $("<p>").append($("<label>").attr("for", "severity_" + i)
                      .text("Severity:")).append(categoryInput));
    var deductionInput = makeSpinner({klass: "deduction", min: 0, delta: 0.1, precision: 2})
        .attr("id", "deduction_" + i)
    td.append(
      $("<p>").append($("<label>").attr("for", "deduction_" + i).text("Deduction:"))
        .append($("<span>").css({"display": "inline-block", "vertical-align": "bottom"})
                .append(deductionInput)));
    deductionInput.find("input").on("change", function() {
      comment.deduction = parseFloat($(this).val());
      comment.saved = false;
      updateScore();
    });
    if (comment.deduction)
      deductionInput.val(comment.deduction).change();
    td = $("<td>").addClass("col-sm-10");
    row.append(td);
    var delComment = $("<span>").addClass("btn btn-alert pull-right")
        .append($("<span>").addClass("glyphicon glyphicon-remove"));
    var commentText = $("<textarea>").attr("id", "message_" + i).addClass("form-control");
    td.append(
      $("<div>")
        .append(delComment)
        .append($("<label>").text("Comment:").attr("for", "message_" + i))
        .append(commentText));
    commentText.on("change", function() {
      comment.comment = $(this).val();
      comment.saved = false;
    });
    if (comment.comment)
      commentText.val(comment.comment).change();
    
    var ret = {cmWidget: cm.addLineWidget(line, widget[0], {coverGutter: false, noHScroll: true}),
               dom: widget,
               comment: comment};
    delComment.on("click", function() { deleteComment(ret); });
    return ret;
  }
  function deleteComment(comment) {
    comment.cmWidget.clear();
    commentObjs.splice(commentObjs.indexOf(comment.comment), 1);
    updateScore();
  }
  updateScore();

  $(".CodeMirror").each(function(i) {
    this.CodeMirror.on("gutterClick", function(cm, line, gutter, e) { return insertComment(cm, line); });
  });

  var filesTree = $("#files");
  filesTree.on("nodeChecked", function(e, data) {
    if (data.href !== undefined && data.href !== "#")
      $(data.$el).addClass("unvisited");
    else
      filesTree.treeview("uncheckNode", data);
  });
  filesTree.on("nodeUnchecked", function(e, data) {
    $(data.$el).removeClass("unvisited");
    if ($(".unvisited").length === 0) {
      $("#completed").removeClass("disabled").text("Mark grading as complete");
    }      
  })
  filesTree.treeview("getCollapsed").map(function(item) {
    filesTree.treeview("checkNode", item);
  });

  filesTree.on("nodeSelected", function(e, data) {
    e.preventDefault();
    e.stopPropagation();
    $("#files").treeview("uncheckNode", data);
  });
  filesTree.treeview("selectNode", filesTree.treeview("getCollapsed")[0]);
  
});
