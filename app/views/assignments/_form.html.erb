<%= form_for [@course, @assignment] do |f| %>
  <% if @assignment.errors.any? %>
    <div id="error_explanation" class="alert alert-danger">
      <h2><%= pluralize(@assignment.errors.count, "error") %> prohibited this
        assignment from being saved:</h2>

      <ul>
      <% @assignment.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="form-group">
    <%= f.label :name %>
    <%= f.text_field :name, class: 'form-control' %>
  </div>
  <div class="form-group">
    <%= f.label :assignment, "Assignment Text" %>
    <p>This description will appear on the homework-submission page,
    and may be useful to remind students which files are expected, or
      a link to the assignment itself.  HTML markup is allowed here.</p>
    <%= f.text_area :assignment, class: "form-control rich-text" %>
  </div>
  <div class="form-group">
    <%= f.label :assignment_file %>
    <%= f.file_field :assignment_file %>
  </div>
  <div class="form-group">
    <%= f.label :points_available %>
    <br>(This is the percentage of the final grade that this
    assignment is worth.  Default: same as previous assignment)
    <%= f.text_field :points_available, size: 10, class: 'form-control numeric' %>
  </div>
  <div class="form-group">
    <%= f.label :hide_grading, "Hide Grading?" %>
    <%= f.check_box :hide_grading, checked: true %>
    <br>(Assignment scores and teacher notes are hidden.)
  </div>
  <div class="form-group">
    <p><strong>Late Penalty</strong></p>
    <%= fields_for "lateness" do |late| %>
    <%= render 'lateness/picker', :within_course => true, :f_late => late, :f_course => f %>
    <% end %>
  </div>
  <div class="form-group">
    <p><strong>Graders</strong></p>
    <%= fields_for "graders[]", GraderConfig.new do |graders| %>
      <ol id="grader-defns">
      <% @assignment.grader_configs.each do |conf| %>
        <li><%= graders.fields_for "", conf do |g| %>
          <%= render("graders/picker", :f_grader => g, 
                     :target => conf, :new_grader => "graderconf#{conf.id}") %>
        <% end %></li>
      <% end %>
      </ol>
      <% grader_text = fields_for("graders", GraderConfig.new, :index => "new_grader") do |g|
            render("graders/picker", :f_grader => g, :target => g.object)
      end %>
      <%= link_to "Add assignment grader", "#", class: "btn btn-default",
                  id: "add-grader",
                  data: {on: :click, call: "add_grader", args: ["#{grader_text}"]} %>
    <% end %>
    <% if @assignment.grader_configs.count > 0 then disabled="" else disabled="disabled" end %>
    <%= link_to "Remove assignment grader", "#", class: "btn btn-default #{disabled}",
              id: "remove-grader",
              data: {on: :click, call: "remove_grader", args: []} %>
  </div>
  <div class="form-group">
    <%= f.label :team_subs, "Team Submissions?" %>
    <%= f.check_box :team_subs %>
    <br>(Can only submit as a member of a team.)
  </div>
  <div class="form-group">
    <%= f.label :due_date %>
    <div class="row"><p class="col-sm-12">(Assignment should not be
    submitted after this time. Default: one week from today.)</p></div>
    <div class="row">
      <div class="col-sm-6">
        <%= f.text_field :due_date, value: (@assignment.nil? ? nil : @assignment.due_date.strftime("%Y-%m-%d %H:%M")),
            class: 'form-control' %>
      </div>
      <script type="text/javascript">
        $(function () {
          $('#assignment_due_date').datetimepicker({
            sideBySide: true,
            format: "YYYY/MM/DD h:mm A",
            minDate: "<%= @course.created_at.strftime("%Y-%m-%d") %>",
            <% if @assignment.due_date.nil? %>
            defaultDate: "<%= (DateTime.current.end_of_day + 1.week).strftime("%Y-%m-%d %H:%M") %>"
            <% else %>
            defaultDate: "<%= @assignment.due_date.strftime("%Y-%m-%d %H:%M") %>"
            <% end %>
          });
        });
      </script>
    </div>
  </div>
  <div class="form-group">
  <%= f.submit nil, class: 'btn btn-primary' %>
  </div>
<% end %>
<script>
  $(function() { enableReflectiveCalls(); });
  function add_grader(content) {
    var new_id = new Date().getTime();
    var regexp = new RegExp("new_grader", "g");
    $("#grader-defns").append($("<li>").html(content.replace(regexp, new_id)));
    $("#remove-grader").removeClass("disabled");
    $("[href='#" + new_id + "_JavaStyleGrader']").tab('show');
  }
  function remove_grader() {
    var defns = $("#grader-defns > li");
    if (defns.length == 1)
      $("#remove-grader").addClass("disabled");
    defns.last().remove();
  }    
</script>
